name: Continuous Integration for ESP32

on:
  push:
    paths-ignore:
      - "**/README.md"
      - "**/logo/*"
      - "**/schematic/*"
      - "LICENCE"
      - "logo.png"
      - ".gitignore"
      - ".gitattributes"
  pull_request:
  workflow_dispatch:

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4      

      - name: Install ESP32 Toolchain
        run: |
          curl -L https://github.com/esp-rs/embuild/releases/latest/download/ldproxy-x86_64-unknown-linux-gnu.zip -o $HOME/.cargo/bin/ldproxy.zip
          unzip "$HOME/.cargo/bin/ldproxy.zip" -d "$HOME/.cargo/bin/"
          chmod a+x $HOME/.cargo/bin/ldproxy
          curl -L https://github.com/esp-rs/espup/releases/latest/download/espup-x86_64-unknown-linux-gnu -o espup
          chmod a+x espup
          ./espup install

      - name: Set ESP32 Environment Variables
        run: |
          source $HOME/export-esp.sh
          export ESP_IDF_PATH=$HOME/.espressif/esp-idf
          echo "ESP_IDF_PATH set to $ESP_IDF_PATH"

      - name: Enable Caching
        uses: Swatinem/rust-cache@v2
        with: 
          cache-all-crates: "true"
          cache-on-failure: "false"
          cache-targets: "true"
          cache-provider: "github"

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fmt Check
        run: cargo fmt --check

  audit-check:
    name: Audit Check
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cargo-audit
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-audit-${{ runner.os }}-

      - name: Install cargo-audit (if not cached)
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi

      - name: Run cargo-audit
        run: cargo audit --deny warnings

  clippy-check:
    name: Clippy Check
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Clippy
        run: cargo clippy -- --deny warnings --no-deps

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Project for ESP32
        run: cargo build --release --target xtensa-esp32-espidf -vv